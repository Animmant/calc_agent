import logging
import re
import ast
import operator
from langchain_core.tools import tool

logger = logging.getLogger(__name__)

# –ë–µ–∑–ø–µ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è eval
SAFE_OPERATORS = {
    ast.Add: operator.add,
    ast.Sub: operator.sub,
    ast.Mult: operator.mul,
    ast.Div: operator.truediv,
    ast.Pow: operator.pow,
    ast.USub: operator.neg,
    ast.UAdd: operator.pos,
}

def safe_eval(expression: str) -> float:
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º–æ –≤–∏—Ä–∞–∑ –≤ AST
        node = ast.parse(expression, mode='eval')
        return _eval_node(node.body)
    except Exception as e:
        raise ValueError(f"–ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—á–∏—Å–ª–∏—Ç–∏ –≤–∏—Ä–∞–∑: {e}")

def _eval_node(node):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—á–∏—Å–ª—é—î –≤—É–∑–ª–∏ AST"""
    if isinstance(node, ast.Constant):  # –ß–∏—Å–ª–∞
        return node.value
    elif isinstance(node, ast.BinOp):  # –ë—ñ–Ω–∞—Ä–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        left = _eval_node(node.left)
        right = _eval_node(node.right)
        op = SAFE_OPERATORS.get(type(node.op))
        if op is None:
            raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è: {type(node.op)}")
        return op(left, right)
    elif isinstance(node, ast.UnaryOp):  # –£–Ω–∞—Ä–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        operand = _eval_node(node.operand)
        op = SAFE_OPERATORS.get(type(node.op))
        if op is None:
            raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ —É–Ω–∞—Ä–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è: {type(node.op)}")
        return op(operand)
    else:
        raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –≤—É–∑–ª–∞: {type(node)}")

@tool
def basic_calculator(expression: str) -> str:
    """
    –í–∏–∫–æ–Ω—É—î –ø—Ä–æ—Å—Ç—ñ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (+, -, *, /, **) –Ω–∞–¥ —Ä—è–¥–∫–æ–º.
    –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "2 + 2", "10 * 5 / 2 - 3", "2 ** 3".
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–µ—Ä –≤–∏—Ä–∞–∑—ñ–≤ –∑–∞–º—ñ—Å—Ç—å eval().
    """
    logger.info(f"üßÆ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 'basic_calculator' –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –≤–∏—Ä–∞–∑–æ–º: '{expression}'")
    
    # –û—á–∏—â—É—î–º–æ –≤–∏—Ä–∞–∑ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    expression = expression.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    allowed_pattern = r'^[0-9+\-*/().\s**]+$'
    if not re.match(allowed_pattern, expression):
        logger.warning(f"–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —É –≤–∏—Ä–∞–∑—ñ: '{expression}'")
        return "–ü–æ–º–∏–ª–∫–∞: –≤–∏—Ä–∞–∑ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: —Ü–∏—Ñ—Ä–∏, +, -, *, /, **, (), ."
    
    try:
        result = safe_eval(expression)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è '{expression}': {result}")
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, float) and result.is_integer():
            return str(int(result))
        else:
            return f"{result:.6g}"  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –≤–∏—Ä–∞–∑—É '{expression}': {e}", exc_info=True)
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: {e}"

@tool
def advanced_math_solver(problem_description: str) -> str:
    """
    –†–æ–∑–≤'—è–∑—É—î —Å–∫–ª–∞–¥–Ω—ñ—à—ñ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ, –æ–ø–∏—Å–∞–Ω—ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é.
    –ü–æ–∫–∏ —â–æ —Ü–µ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è.
    """
    logger.info(f"üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 'advanced_math_solver' –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –æ–ø–∏—Å–æ–º: '{problem_description}'")
    
    # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–µ—è–∫–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–¥–∞—á
    problem_lower = problem_description.lower()
    
    if "–∫–≤–∞–¥—Ä–∞—Ç" in problem_lower and "–∫–æ—Ä—ñ–Ω—å" in problem_lower:
        return "–î–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–µ–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ basic_calculator –∑ –≤–∏—Ä–∞–∑–æ–º —Ç–∏–ø—É '25 ** 0.5'"
    elif "–≤—ñ–¥—Å–æ—Ç–æ–∫" in problem_lower or "%" in problem_lower:
        return "–î–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ basic_calculator. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '100 * 0.15' –¥–ª—è 15% –≤—ñ–¥ 100"
    elif "–ø–ª–æ—â–∞" in problem_lower:
        if "–∫—Ä—É–≥" in problem_lower:
            return "–ü–ª–æ—â–∞ –∫—Ä—É–≥–∞ = œÄ * r¬≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ basic_calculator –∑ –≤–∏—Ä–∞–∑–æ–º '3.14159 * r * r'"
        elif "–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫" in problem_lower:
            return "–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ = –¥–æ–≤–∂–∏–Ω–∞ * —à–∏—Ä–∏–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ basic_calculator"
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    return ("–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á —â–µ —Ä–æ–∑—Ä–æ–±–ª—è—î—Ç—å—Å—è. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É —è–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è basic_calculator.")

# –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
calculator_tools = [basic_calculator, advanced_math_solver] 