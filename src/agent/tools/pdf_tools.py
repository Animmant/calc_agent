"""
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –∑–≤—ñ—Ç—ñ–≤ —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.
"""

import logging
from typing import Dict, Any, Optional, List
from langchain_core.tools import tool

from src.reporting.pdf_generator import (
    generate_debug_pdf, 
    generate_math_notebook_pdf, 
    get_available_engines
)

logger = logging.getLogger(__name__)


@tool
def create_debug_report(
    original_user_query: str,
    reasoning_steps: List[str],
    tool_name: str,
    tool_input: Dict[str, Any],
    tool_output: str,
    final_response: str,
    llm_model: str = "gemini-1.5-flash"
) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î PDF –∑–≤—ñ—Ç –¥–ª—è –¥–µ–±–∞–≥—É —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç–∞.
    
    Args:
        original_user_query: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        reasoning_steps: –°–ø–∏—Å–æ–∫ –∫—Ä–æ–∫—ñ–≤ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
        tool_name: –ù–∞–∑–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_input: –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_output: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        final_response: –§—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≥–µ–Ω—Ç–∞
        llm_model: –ú–æ–¥–µ–ª—å LLM, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—è
    
    Returns:
        –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ PDF —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        debug_data = {
            "original_user_query": original_user_query,
            "llm_reasoning_steps": reasoning_steps,
            "tool_name": tool_name,
            "tool_input": tool_input,
            "tool_output": tool_output,
            "final_agent_response": final_response,
            "resources": {
                "llm_model": llm_model
            }
        }
        
        pdf_path = generate_debug_pdf(debug_data)
        
        if pdf_path:
            return f"‚úÖ PDF –∑–≤—ñ—Ç –¥–µ–±–∞–≥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –∑–≤—ñ—Ç –¥–µ–±–∞–≥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ debug PDF: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑–≤—ñ—Ç—É: {str(e)}"


@tool
def create_math_notebook(
    problem_statement: str,
    solution_steps: str,
    final_answer: Optional[str] = None
) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∑–æ—à–∏—Ç –∑ —Ä–æ–∑–≤'—è–∑–∫–æ–º –∑–∞–¥–∞—á—ñ.
    
    Args:
        problem_statement: –§–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó –∑–∞–¥–∞—á—ñ
        solution_steps: –ü–æ–∫—Ä–æ–∫–æ–≤–µ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è (–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ LaTeX)
        final_answer: –§—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ PDF —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        # –§–æ—Ä–º—É—î–º–æ LaTeX –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–≤'—è–∑–∫—É
        latex_content = solution_steps
        
        if final_answer:
            latex_content += f"\n\n\\textbf{{–í—ñ–¥–ø–æ–≤—ñ–¥—å:}} {final_answer}"
        
        pdf_path = generate_math_notebook_pdf(problem_statement, latex_content)
        
        if pdf_path:
            return f"‚úÖ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ math notebook PDF: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑–æ—à–∏—Ç–∞: {str(e)}"


@tool
def create_simple_math_notebook(problem_and_solution: str) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∑–æ—à–∏—Ç –∑ –∑–∞–¥–∞—á–µ—é —Ç–∞ —Ä–æ–∑–≤'—è–∑–∫–æ–º.
    
    Args:
        problem_and_solution: –¢–µ–∫—Å—Ç –∑ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è–º –∑–∞–¥–∞—á—ñ —Ç–∞ —ó—ó —Ä–æ–∑–≤'—è–∑–∫–æ–º
    
    Returns:
        –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ PDF —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –∑–∞–¥–∞—á—É —Ç–∞ —Ä–æ–∑–≤'—è–∑–æ–∫ (–ø—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥)
        lines = problem_and_solution.split('\n')
        problem_statement = lines[0] if lines else "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –∑–∞–¥–∞—á–∞"
        solution_steps = '\n'.join(lines[1:]) if len(lines) > 1 else problem_and_solution
        
        pdf_path = generate_math_notebook_pdf(problem_statement, solution_steps)
        
        if pdf_path:
            return f"‚úÖ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ simple math notebook PDF: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑–æ—à–∏—Ç–∞: {str(e)}"


@tool
def create_simple_debug_report(query_and_result: str) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π PDF –∑–≤—ñ—Ç –∑ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    
    Args:
        query_and_result: –¢–µ–∫—Å—Ç –∑ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–æ–±–æ—Ç–∏
    
    Returns:
        –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ PDF —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        debug_data = {
            "original_user_query": query_and_result,
            "llm_reasoning_steps": ["–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É", "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"],
            "tool_name": "general_processing",
            "tool_input": {"query": query_and_result},
            "tool_output": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏",
            "final_agent_response": query_and_result,
            "resources": {
                "llm_model": "gemini-1.5-flash"
            }
        }
        
        pdf_path = generate_debug_pdf(debug_data)
        
        if pdf_path:
            return f"‚úÖ PDF –∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –∑–≤—ñ—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ simple debug PDF: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑–≤—ñ—Ç—É: {str(e)}"


@tool
def check_pdf_engines() -> str:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å PDF –¥–≤–∏–∂–∫—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.
    
    Returns:
        –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–≤–∏–∂–∫—ñ–≤
    """
    try:
        engines = get_available_engines()
        available = [name.upper() for name, status in engines.items() if status]
        unavailable = [name.upper() for name, status in engines.items() if not status]
        
        result = "üîß –°—Ç–∞—Ç—É—Å PDF –¥–≤–∏–∂–∫—ñ–≤:\n"
        
        if available:
            result += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(available)}\n"
        
        if unavailable:
            result += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(unavailable)}\n"
        
        if not available:
            result += "\nüí° –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å:\n"
            result += "‚Ä¢ LaTeX: https://www.latex-project.org/get/\n"
            result += "‚Ä¢ Typst: https://github.com/typst/typst/releases"
        
        return result
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ PDF –¥–≤–∏–∂–∫—ñ–≤: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–≤–∏–∂–∫—ñ–≤: {str(e)}"


@tool
def create_enhanced_math_notebook(
    problem_statement: str,
    solution_steps: str,
    include_graphs: bool = False,
    include_verification: bool = False
) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∑–æ—à–∏—Ç –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.
    
    Args:
        problem_statement: –§–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó –∑–∞–¥–∞—á—ñ
        solution_steps: –ü–æ–∫—Ä–æ–∫–æ–≤–µ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è (LaTeX —Ñ–æ—Ä–º–∞—Ç)
        include_graphs: –ß–∏ –≤–∫–ª—é—á–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ (—è–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ)
        include_verification: –ß–∏ –≤–∫–ª—é—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–∑–≤'—è–∑–∫—É
    
    Returns:
        –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ PDF —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    """
    try:
        # –†–æ–∑—à–∏—Ä—é—î–º–æ LaTeX –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Å–µ–∫—Ü—ñ—è–º–∏
        enhanced_content = solution_steps
        
        if include_verification:
            enhanced_content += "\n\n\\section*{–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–≤'—è–∑–∫—É}\n"
            enhanced_content += "–ü—ñ–¥—Å—Ç–∞–≤–∏–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤–∏—Ö—ñ–¥–Ω–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ä–æ–∑–≤'—è–∑–∫—É."
        
        if include_graphs:
            enhanced_content += "\n\n\\section*{–ì—Ä–∞—Ñ—ñ—á–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è}\n"
            enhanced_content += "\\begin{center}\n\\textit{–¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≥—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó}\n\\end{center}"
        
        pdf_path = generate_math_notebook_pdf(problem_statement, enhanced_content)
        
        if pdf_path:
            return f"‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π PDF –∑–æ—à–∏—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ enhanced math notebook PDF: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ PDF –∑–æ—à–∏—Ç–∞: {str(e)}"


# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
pdf_tools = [
    create_simple_math_notebook,  # –°–ø—Ä–æ—â–µ–Ω—ñ –≤–µ—Ä—Å—ñ—ó —Å–ø–æ—á–∞—Ç–∫—É
    create_simple_debug_report,
    create_math_notebook,
    create_debug_report,
    check_pdf_engines,
    create_enhanced_math_notebook
] 