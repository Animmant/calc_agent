from dataclasses import dataclass, asdict
import json
import os
import subprocess
from typing import Sequence
import uuid

from dotenv import find_dotenv, load_dotenv
from langchain_core.language_models import LanguageModelLike
from langchain_core.runnables import RunnableConfig
from langchain_core.tools import BaseTool, tool

from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver
# from mail import fetch_recent_emails  # –í–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π –º–æ–¥—É–ª—å

import sys
from typing import NoReturn, Optional
from langchain_google_genai import ChatGoogleGenerativeAI
import google.api_core.exceptions as google_exceptions

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
GOOGLE_MODEL_NAME = "gemini-1.5-flash-latest"
TEMPERATURE = 0

@dataclass
class RestaurantConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–∞–∑–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤."""
    food_type: str
    cuisine: str
    restaurant_name: str

def _exit_with_error(message: str, error: Optional[Exception] = None) -> NoReturn:
    """–î—Ä—É–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –ø—Ä–æ–≥—Ä–∞–º—É."""
    if error:
        print(f"‚ùå Error: {message} Details: {error}")
    else:
        print(f"‚ùå Error: {message}")
    sys.exit(1)

def setup_environment():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö."""
    load_dotenv(find_dotenv())
    google_api_key = os.getenv("GOOGLE_API_KEY")
    
    if not google_api_key:
        _exit_with_error(
            "GOOGLE_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.\n"
            "üí° –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å GOOGLE_API_KEY —É –≤–∞—à–æ–º—É .env —Ñ–∞–π–ª—ñ."
        )
    
    print("‚úÖ API_KEY —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ .env")
    return google_api_key

def initialize_llm(api_key: str) -> LanguageModelLike:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LLM –º–æ–¥–µ–ª—ñ."""
    try:
        model_gemi = ChatGoogleGenerativeAI(
            model=GOOGLE_MODEL_NAME,
            temperature=TEMPERATURE,
            google_api_key=api_key
        )
        print(f"‚úÖ Google LLM ({GOOGLE_MODEL_NAME}) —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        return model_gemi
    except google_exceptions.InvalidArgument as e:
        _exit_with_error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google LLM: {e}", e)

# --- Tools –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ---

@tool
def generate_restaurant_name(food_type: str, cuisine: str, restaurant_name: str) -> str:
    """–ì–µ–Ω–µ—Ä—É—î –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.
    
    Args:
        food_type: –¢–∏–ø —ó–∂—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Italian pizza")
        cuisine: –ö—É—Ö–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Mediterranean") 
        restaurant_name: –ù–∞–∑–≤–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    
    Returns:
        –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏
    """
    # –¢—É—Ç –±—É–¥–µ –≤–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    return f"–ê—Ä—Ç–∏–∑–∞–Ω—Å—å–∫–∞ {food_type} —É —Å—Ç–∏–ª—ñ {cuisine} –≤—ñ–¥ {restaurant_name}"

@tool
def get_restaurant_info() -> str:
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω."""
    return "–¶–µ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑ —Å–µ—Ä–µ–¥–∑–µ–º–Ω–æ–º–æ—Ä—Å—å–∫–æ—é –∫—É—Ö–Ω–µ—é."

@tool 
def save_menu_item(name: str, description: str) -> str:
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.
    
    Args:
        name: –ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏
        description: –û–ø–∏—Å —Å—Ç—Ä–∞–≤–∏
    
    Returns:
        –°—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    """
    menu_item = {
        "id": str(uuid.uuid4()),
        "name": name,
        "description": description,
        "created_at": str(uuid.uuid4())
    }
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª (–∞–±–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö)
    try:
        with open("menu_items.json", "a") as f:
            f.write(json.dumps(menu_item) + "\n")
        return f"‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}"

def create_calculator_agent(llm: LanguageModelLike) -> any:
    """–°—Ç–≤–æ—Ä—é—î ReAct –∞–≥–µ–Ω—Ç–∞ –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏."""
    
    # –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    tools = [
        generate_restaurant_name,
        get_restaurant_info,
        save_menu_item
    ]
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ memory
    memory = InMemorySaver()
    
    agent = create_react_agent(
        llm, 
        tools,
        checkpointer=memory
    )
    
    return agent

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏."""
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        api_key = setup_environment()
        llm = initialize_llm(api_key)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
        agent = create_calculator_agent(llm)
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É
        config = RunnableConfig(
            configurable={"thread_id": str(uuid.uuid4())}
        )
        
        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –∞–≥–µ–Ω—Ç–∞
        print("\nü§ñ –¢–µ—Å—Ç—É—î–º–æ Calculator Agent...")
        
        # –ó–∞–ø–∏—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞–∑–≤–∏ —Å—Ç—Ä–∞–≤–∏
        restaurant_config = RestaurantConfig(
            food_type="Italian pizza",
            cuisine="Mediterranean", 
            restaurant_name="Italian Restaurant"
        )
        
        query1 = f"–°—Ç–≤–æ—Ä–∏ –Ω–∞–∑–≤—É –¥–ª—è {restaurant_config.food_type} –≤ —Å—Ç–∏–ª—ñ {restaurant_config.cuisine} –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_config.restaurant_name}"
        
        response1 = agent.invoke(
            {"messages": [("user", query1)]}, 
            config=config
        )
        
        print("üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≥–µ–Ω—Ç–∞:")
        print(response1["messages"][-1].content)
        
        # –ó–∞–ø–∏—Ç 2: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –º–µ–Ω—é
        query2 = "–ó–±–µ—Ä–µ–∂–∏ —Ü—é —Å—Ç—Ä–∞–≤—É –≤ –º–µ–Ω—é –∑ –æ–ø–∏—Å–æ–º '–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∞ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞ –ø—ñ—Ü–∞ –∑ —Å–µ—Ä–µ–¥–∑–µ–º–Ω–æ–º–æ—Ä—Å—å–∫–∏–º–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏'"
        
        response2 = agent.invoke(
            {"messages": [("user", query2)]},
            config=config
        )
        
        print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:")
        print(response2["messages"][-1].content)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
