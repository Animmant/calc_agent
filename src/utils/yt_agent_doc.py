from dataclasses import dataclass, asdict
import json
import os
import subprocess
from typing import Sequence
import uuid

from dotenv import find_dotenv, load_dotenv
from langchain_core.language_models import LanguageModelLike
from langchain_core.runnables import RunnableConfig
from langchain_core.tools import BaseTool, tool
from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver
# from mail import fetch_recent_emails  # –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ


load_dotenv(find_dotenv())

REQUISITES_FILE = os.path.join("src", "utils", "akt_skylie_groupe_example.pdf")


@dataclass
class Bank:
    """–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    name: str  # –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
    BIC: str  # –ë–ò–ö
    current_account: str  # —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç
    corporate_account: str  # –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á—ë—Ç


@dataclass
class Customer:
    """–ó–∞–∫–∞–∑—á–∏–∫"""
    name: str  # –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞, –Ω–∞–ø—Ä–∏–µ–º–µ—Ä, –û–û–û ¬´–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞¬ª
    INN: str  # –ò–ù–ù
    OGRN: str  # –û–ì–†–ù –∏–ª–∏ –û–ì–†–ù–ò–ü
    address: str  # —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å
    signatory: str  # –ø–æ–¥–ø–∏—Å–∞–Ω—Ç
    bank: Bank  # –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞


@dataclass
class Job:
    task: str  # –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    price: int  # —Ü–µ–Ω–∞ –∑–∞ –∑–∞–¥–∞—á—É


@tool
def generate_pdf_act(customer: Customer, jobs: list[Job]) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–∞–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
    –∫–ª–∏–µ–Ω—Ç–∞, –µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

    Args:
        customer (Customer): –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        jobs (list[Job]): —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –∞–∫—Ç

    Returns:
        None
    """
    try:
        print(f"üîß DEBUG: –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–∫—Ç –¥–ª—è {customer.name}")
        print(f"üîß DEBUG: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–±—ñ—Ç: {len(jobs)}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É typst —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs("typst", exist_ok=True)
        
        act_json = {
            "customer": asdict(customer),
            "jobs": list(map(lambda j: asdict(j), jobs))
        }
        
        json_file_path = os.path.join("typst", "act.json")
        with open(json_file_path, "w", encoding='utf-8') as f:
            json.dump(act_json, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {json_file_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π typst
        try:
            subprocess.run(["typst", "--version"], 
                          check=True, 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE)
            typst_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            typst_available = False
            print("‚ö†Ô∏è Typst –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –°—Ç–≤–æ—Ä—é—é HTML –≤–µ—Ä—Å—ñ—é...")
        
        if typst_available:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î typst template
            typst_template = os.path.join("typst", "act.typ")
            if not os.path.exists(typst_template):
                print(f"‚ö†Ô∏è –£–í–ê–ì–ê: –§–∞–π–ª —à–∞–±–ª–æ–Ω—É {typst_template} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                print("üìù –°—Ç–≤–æ—Ä—é—é –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω...")
                create_basic_typst_template()
            
            command = ["typst", "compile", "--root", "./typst", "typst/act.typ"]
            print(f"üîß DEBUG: –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(command)}")
            
            result = subprocess.run(command,
                                   check=True,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE, 
                                   text=True)
            
            print("‚úÖ PDF –∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ HTML –≤–µ—Ä—Å—ñ—é —è–∫ fallback
            create_html_act(customer, jobs)
            print("‚úÖ HTML –∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ (typst –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF: {e}")
        print(f"‚ùå STDERR: {e.stderr}")
        print(f"‚ùå STDOUT: {e.stdout}")
        # Fallback –¥–æ HTML
        try:
            create_html_act(customer, jobs)
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ HTML –≤–µ—Ä—Å—ñ—é —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É")
        except Exception as fallback_error:
            raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω—ñ PDF, –Ω—ñ HTML: {e.stderr}, {fallback_error}")
    except Exception as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise


@tool
def generate_pdf_invoice(customer: Customer, jobs: list[Job]) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-—Å—á—ë—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
    –∫–ª–∏–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

    Args:
        customer (Customer): –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        jobs (list[Job]): —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –∞–∫—Ç

    Returns:
        None
    """
    try:
        print(f"üîß DEBUG: –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è {customer.name}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É typst —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        os.makedirs("typst", exist_ok=True)
        
        invoice_json = {
            "customer": asdict(customer),
            "jobs": list(map(lambda j: asdict(j), jobs))
        }
        
        json_file_path = os.path.join("typst", "invoice.json")
        with open(json_file_path, "w", encoding='utf-8') as f:
            json.dump(invoice_json, f, ensure_ascii=False, indent=2)
            
        print(f"‚úÖ JSON —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {json_file_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π typst
        try:
            subprocess.run(["typst", "--version"], 
                          check=True, 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE)
            typst_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            typst_available = False
            print("‚ö†Ô∏è Typst –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –°—Ç–≤–æ—Ä—é—é HTML –≤–µ—Ä—Å—ñ—é...")
        
        if typst_available:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î typst template
            typst_template = os.path.join("typst", "invoice.typ")
            if not os.path.exists(typst_template):
                print(f"‚ö†Ô∏è –£–í–ê–ì–ê: –§–∞–π–ª —à–∞–±–ª–æ–Ω—É {typst_template} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                print("üìù –°—Ç–≤–æ—Ä—é—é –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω...")
                create_basic_invoice_template()
            
            command = ["typst", "compile", "--root", "./typst", "typst/invoice.typ"]
            print(f"üîß DEBUG: –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(command)}")
            
            result = subprocess.run(command,
                                   check=True,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE, 
                                   text=True)
            
            print("‚úÖ PDF —Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        else:
            # –°—Ç–≤–æ—Ä—é—î–º–æ HTML –≤–µ—Ä—Å—ñ—é —è–∫ fallback
            create_html_invoice(customer, jobs)
            print("‚úÖ HTML —Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ (typst –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF: {e}")
        print(f"‚ùå STDERR: {e.stderr}")
        print(f"‚ùå STDOUT: {e.stdout}")
        # Fallback –¥–æ HTML
        try:
            create_html_invoice(customer, jobs)
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ HTML –≤–µ—Ä—Å—ñ—é —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É")
        except Exception as fallback_error:
            raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω—ñ PDF, –Ω—ñ HTML: {e.stderr}, {fallback_error}")
    except Exception as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise


def create_basic_typst_template():
    """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∞–∫—Ç—É"""
    template_content = '''
#let data = json("act.json")

#set page(margin: 2cm)
#set text(font: "Times New Roman", size: 12pt)

#align(center)[
  #text(size: 16pt, weight: "bold")[–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢]
]

#v(1cm)

*–ó–∞–∫–∞–∑—á–∏–∫:* #data.customer.name

*–ò–ù–ù:* #data.customer.INN

*–ê–¥—Ä–µ—Å:* #data.customer.address

*–ü–æ–¥–ø–∏—Å–∞–Ω—Ç:* #data.customer.signatory

#v(1cm)

*–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:*

#for job in data.jobs [
  - #job.task: #job.price —Ä—É–±.
]

#v(2cm)

*–ü–æ–¥–ø–∏—Å—å:* ________________
'''
    
    os.makedirs("typst", exist_ok=True)
    with open(os.path.join("typst", "act.typ"), "w", encoding='utf-8') as f:
        f.write(template_content)
    print("‚úÖ –ë–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω –∞–∫—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!")


def create_basic_invoice_template():
    """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É"""
    template_content = '''
#let data = json("invoice.json")

#set page(margin: 2cm)
#set text(font: "Times New Roman", size: 12pt)

#align(center)[
  #text(size: 16pt, weight: "bold")[–°–ß–Å–¢ –ù–ê –û–ü–õ–ê–¢–£]
]

#v(1cm)

*–ó–∞–∫–∞–∑—á–∏–∫:* #data.customer.name

*–ò–ù–ù:* #data.customer.INN

*–ê–¥—Ä–µ—Å:* #data.customer.address

#v(1cm)

*–ö –æ–ø–ª–∞—Ç–µ:*

#for job in data.jobs [
  - #job.task: #job.price —Ä—É–±.
]

#let total = data.jobs.map(job => job.price).sum()

#v(1cm)

*–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* #total —Ä—É–±.

#v(2cm)

*–ü–æ–¥–ø–∏—Å—å:* ________________
'''
    
    os.makedirs("typst", exist_ok=True)
    with open(os.path.join("typst", "invoice.typ"), "w", encoding='utf-8') as f:
        f.write(template_content)
    print("‚úÖ –ë–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω —Ä–∞—Ö—É–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!")


def create_html_act(customer: Customer, jobs: list[Job]):
    """–°—Ç–≤–æ—Ä—é—î HTML –≤–µ—Ä—Å—ñ—é –∞–∫—Ç—É"""
    total = sum(job.price for job in jobs)
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</title>
    <style>
        body {{ font-family: 'Times New Roman', serif; margin: 2cm; }}
        .header {{ text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 2cm; }}
        .section {{ margin-bottom: 1cm; }}
        .jobs {{ margin: 1cm 0; }}
        .signature {{ margin-top: 3cm; }}
    </style>
</head>
<body>
    <div class="header">–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢</div>
    
    <div class="section">
        <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {customer.name}<br>
        <strong>–ò–ù–ù:</strong> {customer.INN}<br>
        <strong>–û–ì–†–ù:</strong> {customer.OGRN}<br>
        <strong>–ê–¥—Ä–µ—Å:</strong> {customer.address}<br>
        <strong>–ü–æ–¥–ø–∏—Å–∞–Ω—Ç:</strong> {customer.signatory}
    </div>
    
    <div class="section">
        <strong>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</strong><br>
        –ë–∞–Ω–∫: {customer.bank.name}<br>
        –ë–ò–ö: {customer.bank.BIC}<br>
        –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç: {customer.bank.current_account}<br>
        –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á—ë—Ç: {customer.bank.corporate_account}
    </div>
    
    <div class="jobs">
        <strong>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</strong><br>
        <ul>
"""
    
    for job in jobs:
        html_content += f"            <li>{job.task}: {job.price:,} —Ä—É–±.</li>\n"
    
    html_content += f"""
        </ul>
        <strong>–ò—Ç–æ–≥–æ: {total:,} —Ä—É–±.</strong>
    </div>
    
    <div class="signature">
        <strong>–ü–æ–¥–ø–∏—Å—å:</strong> ________________
    </div>
</body>
</html>
"""
    
    with open("act.html", "w", encoding='utf-8') as f:
        f.write(html_content)


def create_html_invoice(customer: Customer, jobs: list[Job]):
    """–°—Ç–≤–æ—Ä—é—î HTML –≤–µ—Ä—Å—ñ—é —Ä–∞—Ö—É–Ω–∫—É"""
    total = sum(job.price for job in jobs)
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É</title>
    <style>
        body {{ font-family: 'Times New Roman', serif; margin: 2cm; }}
        .header {{ text-align: center; font-size: 18px; font-weight: bold; margin-bottom: 2cm; }}
        .section {{ margin-bottom: 1cm; }}
        .jobs {{ margin: 1cm 0; }}
        .total {{ font-size: 16px; font-weight: bold; margin-top: 1cm; }}
        .signature {{ margin-top: 3cm; }}
    </style>
</head>
<body>
    <div class="header">–°–ß–Å–¢ –ù–ê –û–ü–õ–ê–¢–£</div>
    
    <div class="section">
        <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {customer.name}<br>
        <strong>–ò–ù–ù:</strong> {customer.INN}<br>
        <strong>–û–ì–†–ù:</strong> {customer.OGRN}<br>
        <strong>–ê–¥—Ä–µ—Å:</strong> {customer.address}
    </div>
    
    <div class="section">
        <strong>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</strong><br>
        –ë–∞–Ω–∫: {customer.bank.name}<br>
        –ë–ò–ö: {customer.bank.BIC}<br>
        –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç: {customer.bank.current_account}<br>
        –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á—ë—Ç: {customer.bank.corporate_account}
    </div>
    
    <div class="jobs">
        <strong>–ö –æ–ø–ª–∞—Ç–µ:</strong><br>
        <ul>
"""
    
    for job in jobs:
        html_content += f"            <li>{job.task}: {job.price:,} —Ä—É–±.</li>\n"
    
    html_content += f"""
        </ul>
    </div>
    
    <div class="total">
        <strong>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:,} —Ä—É–±.</strong>
    </div>
    
    <div class="signature">
        <strong>–ü–æ–¥–ø–∏—Å—å:</strong> ________________
    </div>
</body>
</html>
"""
    
    with open("invoice.html", "w", encoding='utf-8') as f:
        f.write(html_content)


class LLMAgent:
    def __init__(self, model: LanguageModelLike, tools: Sequence[BaseTool]):
        self._model = model
        self._agent = create_react_agent(
            model,
            tools=tools,
            checkpointer=InMemorySaver())
        self._config: RunnableConfig = {
                "configurable": {"thread_id": uuid.uuid4().hex}}

    def upload_file(self, file):
        """
        –î–ª—è Google Gemini API —Ñ–∞–π–ª–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —ñ–Ω–∞–∫—à–µ.
        –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
        """
        # Google Gemini API –Ω–µ –º–∞—î –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥—É upload_file —è–∫ GigaChat
        # –§–∞–π–ª –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ prompt –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ —Ñ–∞–π–ª
        return file.name if hasattr(file, 'name') else str(file)

    def invoke(
        self,
        content: str,
        attachments: list[str]|None=None,
        temperature: float=0.1
    ) -> str:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç"""
        # –î–ª—è Google Gemini API —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ attachments
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª–∏ –¥–æ–¥–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç—É
        if attachments:
            content += f"\n\n–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏: {', '.join(attachments)}"
            content += "\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ü–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤."
        
        message: dict = {
            "role": "user",
            "content": content
        }
        
        return self._agent.invoke(
            {
                "messages": [message],
                "temperature": temperature
            },
            config=self._config)["messages"][-1].content


def print_agent_response(llm_response: str) -> None:
    print(f"\033[35m{llm_response}\033[0m")


def get_user_prompt() -> str:
    return input("\n–¢—ã: ")


def main():
    # –ó–∞–º—ñ–Ω—é—î–º–æ GigaChat –Ω–∞ Google Gemini
    model = ChatGoogleGenerativeAI(
        model="gemini-2.0-flash-exp",  # –∞–±–æ "gemini-1.5-pro"
        temperature=0.1,
        google_api_key=os.getenv("GOOGLE_API_KEY")
    )

    agent = LLMAgent(model, tools=[generate_pdf_act, generate_pdf_invoice])
    system_prompt = (
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Äî –∞–∫—Ç –∏–ª–∏ —Å—á—ë—Ç –∏–ª–∏ –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
        "–ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç –∏–ª–∏ —Å—á—ë—Ç, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω–∞–¥–æ –≤–∑—è—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "
        "–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—Ä–æ—Å–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ "
        "–∞–∫—Ç (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å), —Ä–∞–±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –∫–∞—á–µ—Ç—Å–≤–µ —Ä–∞–±–æ—Ç—ã –∫—É—Ä—Å, —Ç–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ—Ä—ë–º –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É, –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–∫—É—é "
        "\"–û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫—É—Ä—Å–µ ¬´–•–∞—Ä–¥–∫–æ—Ä–Ω–∞—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª\", —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 170 —Ç—ã—Å —Ä—É–±."
        "–ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∏ —É "
        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π, –æ–Ω–∏ –µ—Å—Ç—å –≤ –º–æ—ë–º –∫–æ–¥–µ. "
        "–ò–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–æ –æ–¥–Ω–æ–π –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã, "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ê.–ï. "
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏ —ë–ª–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, "
        "–û–û–û ¬´–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞¬ª, —Ç–æ –µ—Å—Ç—å –¥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å—Ç–∞–≤–∏–º ¬´ –∏ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è "
        "—Å—Ç–∞–≤–∏–º ¬ª."
        f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {REQUISITES_FILE}"
    )

    # –î–ª—è Google Gemini API –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
    try:
        with open(REQUISITES_FILE, "rb") as file:
            file_path = agent.upload_file(file)
            agent_response = agent.invoke(content=system_prompt, attachments=[file_path])
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {REQUISITES_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂—É—é –±–µ–∑ —Ñ–∞–π–ª—É.")
        agent_response = agent.invoke(content=system_prompt)

    while(True):
        print_agent_response(agent_response)
        agent_response = agent.invoke(get_user_prompt())


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–¥–æ—Å–≤–∏–¥—É–ª–∏!")