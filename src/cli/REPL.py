import logging
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è LangGraph

from src.agent.agent_executor import create_llm, create_agent_executor
from src.agent.tools.calculator import calculator_tools  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏

logger = logging.getLogger(__name__)

def run_chat_loop():
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ü–∏–∫–ª —á–∞—Ç—É –∑ –∞–≥–µ–Ω—Ç–æ–º."""
    try:
        llm = create_llm()
        tools = calculator_tools  # –ü–æ–∫–∏ —â–æ –ª–∏—à–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        agent_executor = create_agent_executor(llm, tools)

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Å–µ—Å—ñ—ó (thread_id –¥–ª—è LangGraph)
        # –¶–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∞–≥–µ–Ω—Ç –ø–∞–º'—è—Ç–∞–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –≤ –º–µ–∂–∞—Ö –æ–¥–Ω—ñ—î—ó —Å–µ—Å—ñ—ó.
        # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É REPL –±—É–¥–µ –Ω–æ–≤–∞ —Å–µ—Å—ñ—è.
        session_id = uuid.uuid4().hex 
        config = {"configurable": {"thread_id": session_id}}

        logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! –ü–æ—á–∏–Ω–∞–π—Ç–µ –¥—ñ–∞–ª–æ–≥. (Session ID: {session_id})")
        logger.info("–í–≤–µ–¥—ñ—Ç—å 'exit' –∞–±–æ 'quit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

        # –ü–æ—á–∞—Ç–∫–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–º)
        # –î–ª—è create_react_agent —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –Ω–∏–º —Å–∞–º–∏–º,
        # –∞–ª–µ –º–∏ –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ "–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏" –π–æ–≥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º.
        # initial_messages = [("system", "You are a helpful assistant that can use a calculator.")]
        # current_state = agent_executor.invoke({"messages": initial_messages}, config=config)
        # if current_state and 'messages' in current_state and current_state['messages']:
        #     logger.info(f"–ê–≥–µ–Ω—Ç: {current_state['messages'][-1].content}")
        
        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–º–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º–∏. –ß–∏–º –º–æ–∂—É –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º?")
        print("üí° –ü—Ä–∏–∫–ª–∞–¥–∏: '—Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2*3?', '—è–∫ –∑–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –∫—Ä—É–≥–∞?', '15% –≤—ñ–¥ 200'")

        while True:
            try:
                user_input = input("\nüë§ –í–∏: ").strip()
                if user_input.lower() in ["exit", "quit", "–≤–∏—Ö—ñ–¥", "q"]:
                    logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                    break
                if not user_input:
                    continue

                # –í LangGraph ReAct –∞–≥–µ–Ω—Ç –æ—á—ñ–∫—É—î —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                # –§–æ—Ä–º—É—î–º–æ –≤—Ö—ñ–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                payload = {"messages": [("user", user_input)]}
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞
                # `stream` –∞–±–æ `invoke` –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ REPL `invoke` –º–æ–∂–µ –±—É—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ.
                # –î–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫—Ä–∞—â–µ `stream`.
                
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –∞–≥–µ–Ω—Ç—É: {user_input}")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ invoke –¥–ª—è –ø—Ä–æ—Å—Ç—ñ—à–æ—ó –æ–±—Ä–æ–±–∫–∏
                try:
                    response = agent_executor.invoke(payload, config=config)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞
                    if response and 'messages' in response and response['messages']:
                        ai_message = response['messages'][-1]
                        if hasattr(ai_message, 'content') and ai_message.content:
                            print(f"ü§ñ –ê–≥–µ–Ω—Ç: {ai_message.content}")
                        else:
                            print("ü§ñ –ê–≥–µ–Ω—Ç: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
                    else:
                        print("ü§ñ –ê–≥–µ–Ω—Ç: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
                        
                except Exception as invoke_error:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É –∞–≥–µ–Ω—Ç–∞: {invoke_error}", exc_info=True)
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {invoke_error}")
                    print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É.")

            except KeyboardInterrupt:
                logger.info("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —á–µ—Ä–µ–∑ Ctrl+C.")
                break
            except Exception as e:
                logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ REPL: {e}", exc_info=True)
                print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å ('exit').")
                
    except Exception as setup_error:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞: {setup_error}", exc_info=True)
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞: {setup_error}")
        print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª—ñ .env")

def run_chat_loop_with_streaming():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–æ—Ç–æ–∫–æ–≤–∏–º –≤–∏–≤–æ–¥–æ–º (–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞)"""
    try:
        llm = create_llm()
        tools = calculator_tools
        agent_executor = create_agent_executor(llm, tools)

        session_id = uuid.uuid4().hex 
        config = {"configurable": {"thread_id": session_id}}

        print("\nü§ñ –ê–≥–µ–Ω—Ç: –ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–º–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º–∏ (–ø–æ—Ç–æ–∫–æ–≤–∏–π —Ä–µ–∂–∏–º).")
        print("üí° –ü—Ä–∏–∫–ª–∞–¥–∏: '—Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2*3?', '—è–∫ –∑–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –∫—Ä—É–≥–∞?'")

        while True:
            try:
                user_input = input("\nüë§ –í–∏: ").strip()
                if user_input.lower() in ["exit", "quit", "–≤–∏—Ö—ñ–¥", "q"]:
                    break
                if not user_input:
                    continue

                payload = {"messages": [("user", user_input)]}
                
                print("ü§ñ –ê–≥–µ–Ω—Ç: ", end="", flush=True)
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ stream –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
                response_stream = agent_executor.stream(payload, config=config)
                
                full_response_content = ""
                for chunk in response_stream:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ —á–∞–Ω–∫–∏ –≤—ñ–¥ LangGraph
                    messages = chunk.get("messages")
                    if messages:
                        ai_message = messages[-1]
                        if hasattr(ai_message, 'content') and ai_message.content:
                            # –î–ª—è ReAct –∞–≥–µ–Ω—Ç–∞ –∑–∞–∑–≤–∏—á–∞–π –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            # –∞ –Ω–µ —Ç–æ–∫–µ–Ω-–∑–∞-—Ç–æ–∫–µ–Ω–æ–º —Å—Ç—Ä—ñ–º—ñ–Ω–≥
                            full_response_content = ai_message.content

                if full_response_content:
                    print(full_response_content)
                else:
                    print("–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.")

            except KeyboardInterrupt:
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó.")
                break
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ: {e}", exc_info=True)
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    except Exception as setup_error:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {setup_error}", exc_info=True)
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞: {setup_error}")

if __name__ == "__main__":
    # –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ REPL –Ω–∞–ø—Ä—è–º—É
    run_chat_loop() 