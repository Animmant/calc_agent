import logging
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID –ø–æ—Ç–æ–∫—ñ–≤ –¥–ª—è LangGraph
from typing import Optional, Dict, Any, List
from dataclasses import dataclass

from src.agent.agent_executor import create_llm, create_agent_executor
from src.agent.tools.calculator import calculator_tools  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
from src.agent.tools.pdf_tools import pdf_tools  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
from src.agent.prompts import MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE, DEBUG_REPORT_PROMPT_TEMPLATE
from src.reporting.pdf_generator import generate_math_notebook_pdf, generate_debug_pdf, get_available_engines

logger = logging.getLogger(__name__)


@dataclass
class LastInteractionData:
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∞–≥–µ–Ω—Ç–æ–º."""
    original_user_query: Optional[str] = None
    final_agent_response: Optional[str] = None
    tool_invocations: Optional[List[Dict[str, Any]]] = None
    reasoning_steps: Optional[List[str]] = None


class CalculatorREPL:
    """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π REPL –¥–ª—è Calculator Agent."""
    
    def __init__(self):
        self.llm = None
        self.agent_executor = None
        self.session_id = None
        self.config = None
        self.last_interaction = LastInteractionData()
        
    def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–≥–µ–Ω—Ç–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."""
        try:
            self.llm = create_llm()
            # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
            all_tools = calculator_tools + pdf_tools
            self.agent_executor = create_agent_executor(self.llm, all_tools)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Å–µ—Å—ñ—ó
            self.session_id = uuid.uuid4().hex 
            self.config = {"configurable": {"thread_id": self.session_id}}

            logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è! (Session ID: {self.session_id})")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞: {e}", exc_info=True)
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
            print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª—ñ .env")
            return False
    
    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑—É—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        engines = get_available_engines()
        available_engines = [name for name, available in engines.items() if available]
        
        print("\nü§ñ Calculator Agent –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        print("=" * 50)
        print("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
        print("   ‚Ä¢ '—Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2*3?'")
        print("   ‚Ä¢ '—è–∫ –∑–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –∫—Ä—É–≥–∞ –∑ —Ä–∞–¥—ñ—É—Å–æ–º 5?'")
        print("   ‚Ä¢ '15% –≤—ñ–¥ 200'")
        print("   ‚Ä¢ '—Ä–æ–∑–≤'—è–∂–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è x¬≤ - 5x + 6 = 0'")
        print("\nüìÑ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
        print("   ‚Ä¢ /maths - —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ–∑–≤'—è–∑–∫—É")
        print("   ‚Ä¢ /debug - —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF –∑–≤—ñ—Ç –¥–µ–±–∞–≥—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó")
        print("   ‚Ä¢ /engines - –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ PDF –¥–≤–∏–∂–∫–∏")
        print("   ‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É")
        print("   ‚Ä¢ /exit –∞–±–æ /quit - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É")
        
        if available_engines:
            print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ñ PDF –¥–≤–∏–∂–∫–∏: {', '.join(available_engines)}")
        else:
            print("\n‚ö†Ô∏è  PDF –¥–≤–∏–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å LaTeX –∞–±–æ Typst –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF.")
        
        print("=" * 50)
    
    def handle_special_command(self, command: str) -> bool:
        """
        –û–±—Ä–æ–±–ª—è—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.
        –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞.
        """
        command = command.lower().strip()
        
        if command in ["/exit", "/quit"]:
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            return True
            
        elif command == "/help":
            self.show_welcome_message()
            return False
            
        elif command == "/engines":
            self.show_engines_status()
            return False
            
        elif command == "/maths":
            self.handle_maths_command()
            return False
            
        elif command == "/debug":
            self.handle_debug_command()
            return False
            
        return False
    
    def show_engines_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö PDF –¥–≤–∏–∂–∫—ñ–≤."""
        engines = get_available_engines()
        print("\nüîß –°—Ç–∞—Ç—É—Å PDF –¥–≤–∏–∂–∫—ñ–≤:")
        for name, available in engines.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π" if available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
            print(f"   ‚Ä¢ {name.upper()}: {status}")
        
        if not any(engines.values()):
            print("\nüí° –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å:")
            print("   ‚Ä¢ LaTeX: https://www.latex-project.org/get/")
            print("   ‚Ä¢ Typst: https://github.com/typst/typst/releases")
    
    def handle_maths_command(self):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /maths –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞."""
        logger.info("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /maths")

        if not self.last_interaction.original_user_query:
            print("ü§∑ –ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —è–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∑–æ—à–∏—Ç.")
            return

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ "—Å–∏—Ä–∏–π" —Ä–æ–∑–≤'—è–∑–æ–∫
        raw_solution_content = None
        if self.last_interaction.tool_invocations:
            # –ë–µ—Ä–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
            raw_solution_content = self.last_interaction.tool_invocations[-1].get("tool_output")
        
        if not raw_solution_content and self.last_interaction.final_agent_response:
            raw_solution_content = self.last_interaction.final_agent_response
        
        if not raw_solution_content:
            print("ü§∑ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ä–æ–∑–≤'—è–∑–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.")
            return

        problem_statement = self.last_interaction.original_user_query
        
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç—ñ–ª–∞ LaTeX
        formatting_request_content = MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE.format(
            problem_statement=problem_statement,
            raw_solution_content=raw_solution_content
        )
        
        print("üßÆ –ì–µ–Ω–µ—Ä—É—é LaTeX —Ä–æ–∑–≤'—è–∑–æ–∫ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞...")
        
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π LLM –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            formatted_latex_response = self.llm.invoke(formatting_request_content)
            solution_latex_body = formatted_latex_response.content

            if not solution_latex_body or not solution_latex_body.strip():
                logger.error("LLM –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –ø–æ—Ä–æ–∂–Ω—î —Ç—ñ–ª–æ LaTeX –¥–ª—è /maths.")
                print("‚ö†Ô∏è LLM –Ω–µ –∑–º–æ–≥–ª–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ LaTeX —Ä–æ–∑–≤'—è–∑–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
                return

            logger.info(f"LaTeX —Ç—ñ–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ (–¥–æ–≤–∂–∏–Ω–∞: {len(solution_latex_body)}).")

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF
            pdf_path = generate_math_notebook_pdf(problem_statement, solution_latex_body)
            if pdf_path:
                print(f"üìö –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∑–æ—à–∏—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {pdf_path}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞. –î–∏–≤. –ª–æ–≥–∏.")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó /maths PDF: {e}", exc_info=True)
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /maths.")
    
    def handle_debug_command(self):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /debug –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–µ–±–∞–≥—É."""
        logger.info("–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /debug")

        if not self.last_interaction.original_user_query:
            print("ü§∑ –ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–µ–±–∞–≥—É.")
            return

        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É –¥–µ–±–∞–≥—É
        debug_data = {
            "original_user_query": self.last_interaction.original_user_query,
            "llm_reasoning_steps": self.last_interaction.reasoning_steps or ["–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É"],
            "tool_name": "general_processing",
            "tool_input": {"query": self.last_interaction.original_user_query},
            "tool_output": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏",
            "final_agent_response": self.last_interaction.final_agent_response or "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞",
            "resources": {
                "llm_model": "gemini-1.5-flash"
            }
        }

        # –Ø–∫—â–æ —î –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏–∫–ª–∏–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        if self.last_interaction.tool_invocations:
            last_tool = self.last_interaction.tool_invocations[-1]
            debug_data.update({
                "tool_name": last_tool.get("tool_name", "unknown"),
                "tool_input": last_tool.get("tool_input", {}),
                "tool_output": last_tool.get("tool_output", "")
            })

        print("üîç –°—Ç–≤–æ—Ä—é—é –∑–≤—ñ—Ç –¥–µ–±–∞–≥—É...")
        
        try:
            pdf_path = generate_debug_pdf(debug_data)
            if pdf_path:
                print(f"üìã –ó–≤—ñ—Ç –¥–µ–±–∞–≥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç –¥–µ–±–∞–≥—É. –î–∏–≤. –ª–æ–≥–∏.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è debug PDF: {e}", exc_info=True)
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /debug.")
    
    def process_user_input(self, user_input: str):
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        if user_input.startswith('/'):
            if self.handle_special_command(user_input):
                return False  # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É
        
        # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ –∞–≥–µ–Ω—Ç–∞
        payload = {"messages": [("user", user_input)]}
        
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –∞–≥–µ–Ω—Ç—É: {user_input}")
        
        try:
            response = self.agent_executor.invoke(payload, config=self.config)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∑–∞—î–º–æ–¥—ñ—é
            self.last_interaction.original_user_query = user_input
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞
            if response and 'messages' in response and response['messages']:
                ai_message = response['messages'][-1]
                if hasattr(ai_message, 'content') and ai_message.content:
                    self.last_interaction.final_agent_response = ai_message.content
                    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {ai_message.content}")
                else:
                    print("ü§ñ –ê–≥–µ–Ω—Ç: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
            else:
                print("ü§ñ –ê–≥–µ–Ω—Ç: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
                
            # TODO: –î–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è tool_invocations —Ç–∞ reasoning_steps
            # –¶–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ LangGraph
                
        except Exception as invoke_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É –∞–≥–µ–Ω—Ç–∞: {invoke_error}", exc_info=True)
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {invoke_error}")
            print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É.")
        
        return True
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª REPL."""
        if not self.initialize():
            return
        
        self.show_welcome_message()
        
        while True:
            try:
                user_input = input("\nüë§ –í–∏: ").strip()
                if not user_input:
                    continue
                
                if not self.process_user_input(user_input):
                    break  # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                    
            except KeyboardInterrupt:
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó —á–µ—Ä–µ–∑ Ctrl+C.")
                break
            except Exception as e:
                logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ REPL: {e}", exc_info=True)
                print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /exit –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")


def run_chat_loop():
    """–ó–∞–ø—É—Å–∫–∞—î –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ü–∏–∫–ª —á–∞—Ç—É –∑ –∞–≥–µ–Ω—Ç–æ–º (–æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)."""
    repl = CalculatorREPL()
    repl.run()


if __name__ == "__main__":
    # –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ REPL –Ω–∞–ø—Ä—è–º—É
    run_chat_loop() 