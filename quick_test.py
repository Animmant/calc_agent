#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ Calculator Agent
"""

import sys
import os

# –î–æ–¥–∞—î–º–æ src –¥–æ Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """–¢–µ—Å—Ç—É—î –æ—Å–Ω–æ–≤–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤...")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ
        from src.agent.prompts import SYSTEM_PROMPT, MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE
        from src.reporting.pdf_generator import get_available_engines
        from src.agent.tools.pdf_tools import pdf_tools
        from src.cli.REPL import CalculatorREPL
        
        print("‚úÖ –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

def test_pdf_engines():
    """–¢–µ—Å—Ç—É—î PDF –¥–≤–∏–∂–∫–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF –¥–≤–∏–∂–∫—ñ–≤...")
    
    try:
        from src.reporting.pdf_generator import get_available_engines
        engines = get_available_engines()
        
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ñ –¥–≤–∏–∂–∫–∏: {engines}")
        available_count = sum(engines.values())
        
        if available_count > 0:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {available_count} –¥–≤–∏–∂–∫—ñ–≤")
        else:
            print("‚ö†Ô∏è  –ñ–æ–¥–µ–Ω –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–≤–∏–∂–∫—ñ–≤: {e}")
        return False

def test_tools():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
    
    try:
        from src.agent.tools.calculator import calculator_tools
        from src.agent.tools.pdf_tools import pdf_tools
        
        total_tools = len(calculator_tools) + len(pdf_tools)
        print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {total_tools}")
        print(f"   ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ: {len(calculator_tools)}")
        print(f"   ‚Ä¢ PDF: {len(pdf_tools)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}")
        return False

def test_cli():
    """–¢–µ—Å—Ç—É—î CLI"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CLI...")
    
    try:
        from src.cli.REPL import CalculatorREPL
        
        repl = CalculatorREPL()
        print("‚úÖ CLI —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CLI: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç Calculator Agent")
    print("=" * 40)
    
    tests = [
        ("–Ü–º–ø–æ—Ä—Ç–∏", test_imports),
        ("PDF –¥–≤–∏–∂–∫–∏", test_pdf_engines),
        ("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", test_tools),
        ("CLI", test_cli),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {e}")
    
    print("\n" + "=" * 40)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞.")
    else:
        print("‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 