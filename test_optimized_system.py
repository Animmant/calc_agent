#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ Calculator Agent.
"""

import sys
import os
import logging

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
project_root = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, project_root)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_prompts():
    """–¢–µ—Å—Ç—É—î –ø—Ä–æ–º–ø—Ç–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤...")
    
    try:
        from src.agent.prompts import (
            MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE,
            DEBUG_REPORT_PROMPT_TEMPLATE,
            SYSTEM_PROMPT
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ–º–ø—Ç–∏ –º—ñ—Å—Ç—è—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
        assert "{problem_statement}" in MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE
        assert "{raw_solution_content}" in MATH_NOTEBOOK_LATEX_PROMPT_TEMPLATE
        assert "{original_query}" in DEBUG_REPORT_PROMPT_TEMPLATE
        
        print("‚úÖ –ü—Ä–æ–º–ø—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
        return False

def test_pdf_engines():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å PDF –¥–≤–∏–∂–∫—ñ–≤."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF –¥–≤–∏–∂–∫—ñ–≤...")
    
    try:
        from src.reporting.pdf_generator import get_available_engines
        
        engines = get_available_engines()
        print(f"üìä –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫—ñ–≤: {engines}")
        
        available_count = sum(engines.values())
        if available_count > 0:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {available_count} –¥–≤–∏–∂–∫—ñ–≤ –∑ {len(engines)}")
        else:
            print("‚ö†Ô∏è  –ñ–æ–¥–µ–Ω PDF –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –¥–≤–∏–∂–∫—ñ–≤: {e}")
        return False

def test_latex_template():
    """–¢–µ—Å—Ç—É—î LaTeX —à–∞–±–ª–æ–Ω."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è LaTeX —à–∞–±–ª–æ–Ω—É...")
    
    try:
        template_path = "templates/latex/math_notebook_template.tex"
        
        if os.path.exists(template_path):
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            if "{LATEX_CONTENT}" in content:
                print("‚úÖ LaTeX —à–∞–±–ª–æ–Ω –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä")
            else:
                print("‚ö†Ô∏è  LaTeX —à–∞–±–ª–æ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ {LATEX_CONTENT}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞–∫–µ—Ç–∏
            required_packages = ["amsmath", "tikz", "pgfplots", "ukrainian"]
            missing_packages = []
            
            for package in required_packages:
                if package not in content:
                    missing_packages.append(package)
            
            if missing_packages:
                print(f"‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {missing_packages}")
            else:
                print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–∫–µ—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
            
            return True
        else:
            print(f"‚ùå LaTeX —à–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {template_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ LaTeX —à–∞–±–ª–æ–Ω—É: {e}")
        return False

def test_pdf_tools():
    """–¢–µ—Å—Ç—É—î PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
    
    try:
        from src.agent.tools.pdf_tools import pdf_tools
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(pdf_tools)} PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:")
        for tool in pdf_tools:
            print(f"   ‚Ä¢ {tool.name}: {tool.description[:50]}...")
        
        # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–≤–∏–∂–∫—ñ–≤
        from src.agent.tools.pdf_tools import check_pdf_engines
        
        result = check_pdf_engines.invoke({})
        print(f"üîß –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–≤–∏–∂–∫—ñ–≤:\n{result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}")
        return False

def test_cli_structure():
    """–¢–µ—Å—Ç—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É CLI."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ CLI...")
    
    try:
        from src.cli.REPL import CalculatorREPL, LastInteractionData
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä REPL
        repl = CalculatorREPL()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
        interaction = LastInteractionData()
        assert hasattr(interaction, 'original_user_query')
        assert hasattr(interaction, 'final_agent_response')
        assert hasattr(interaction, 'tool_invocations')
        assert hasattr(interaction, 'reasoning_steps')
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ CLI –ø—Ä–∞–≤–∏–ª—å–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ CLI: {e}")
        return False

def test_agent_initialization():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agent.agent_executor import create_llm, create_agent_executor
        from src.agent.tools.calculator import calculator_tools
        from src.agent.tools.pdf_tools import pdf_tools
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        all_tools = calculator_tools + pdf_tools
        print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {len(all_tools)}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ LLM (–º–æ–∂–µ –Ω–µ –≤–¥–∞—Ç–∏—Å—è –±–µ–∑ API –∫–ª—é—á–∞)
        try:
            llm = create_llm()
            print("‚úÖ LLM —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞
            agent_executor = create_agent_executor(llm, all_tools)
            print("‚úÖ –ê–≥–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
        except Exception as llm_error:
            print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ LLM/–∞–≥–µ–Ω—Ç–∞ (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–¥—Å—É—Ç–Ω—ñ–π API –∫–ª—é—á): {llm_error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        return False

def test_directory_structure():
    """–¢–µ—Å—Ç—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    
    required_dirs = [
        "src/agent",
        "src/agent/tools",
        "src/cli",
        "src/reporting",
        "templates/typst",
        "templates/latex",
        "output_pdfs"
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print(f"‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {missing_dirs}")
        return False
    else:
        print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ Calculator Agent...")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π", test_directory_structure),
        ("–ü—Ä–æ–º–ø—Ç–∏", test_prompts),
        ("PDF –¥–≤–∏–∂–∫–∏", test_pdf_engines),
        ("LaTeX —à–∞–±–ª–æ–Ω", test_latex_template),
        ("PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", test_pdf_tools),
        ("CLI —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", test_cli_structure),
        ("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞", test_agent_initialization),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
    elif passed >= total * 0.7:
        print("‚úÖ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∞. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∞ –∑ –¥–µ—è–∫–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏.")
    else:
        print("‚ö†Ô∏è  –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: python main.py")

if __name__ == "__main__":
    main() 