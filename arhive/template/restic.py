import os
import sys # –î–æ–¥–∞–Ω–æ –¥–ª—è sys.exit
from typing import NoReturn, Optional
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI

from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage
import google.api_core.exceptions as google_exceptions
from langchain.prompts import ChatPromptTemplate

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
GOOGLE_MODEL_NAME = "gemini-1.5-flash-latest" # –û–Ω–æ–≤—ñ—Ç—å, —è–∫—â–æ "gemini-2.0-flash" —â–µ –Ω–µ–º–∞—î
OPENAI_MODEL_NAME = "gpt-3.5-turbo"
TEMPERATURE = 0
DEFAULT_PROMPT = "Hello! Explain what LangChain is in one sentence."

def _exit_with_error(message: str, error: Optional[Exception] = None) -> NoReturn:
    """–î—Ä—É–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –ø—Ä–æ–≥—Ä–∞–º—É."""
    if error:
        print(f"‚ùå Error: {message} Details: {error}")
    else:
        print(f"‚ùå Error: {message}")
    sys.exit(1)

def setup_environment():
    load_dotenv()
    google_api_key = os.getenv("GOOGLE_API_KEY")
    openai_api_key = os.getenv("OPENAI_API_KEY")
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤
    if not openai_api_key:
        _exit_with_error(
            "OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.\n"
            "üí° –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å OPENAI_API_KEY —É –≤–∞—à–æ–º—É .env —Ñ–∞–π–ª—ñ."
        )
    if not google_api_key:
        _exit_with_error(
            "GOOGLE_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.\n"
            "üí° –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å GOOGLE_API_KEY —É –≤–∞—à–æ–º—É .env —Ñ–∞–π–ª—ñ."
        )
    
    print("‚úÖ API_KEY —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ .env")

def create_prompts():
    prompt_template = ChatPromptTemplate.from_template(
        "I want to create a new {food_type} for restaurant with {cuisine} for {restaurant_name}. Suggest one concise and appealing name for this food item."
    )
    return prompt_template

def initialize_llm():
    try:
        llm = ChatGoogleGenerativeAI(
            model=GOOGLE_MODEL_NAME,
            temperature=TEMPERATURE
        )
        return llm
    except google_exceptions.InvalidArgument as e:
        _exit_with_error(
            f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google LLM: {e}",e)

def main():
    try:
        setup_environment()
        prompt_template = create_prompts()
        llm = initialize_llm()
        
        response = llm.invoke(DEFAULT_PROMPT)
        print(response.content)

        formatted_prompt = prompt_template.format(
            food_type="Italian pizza", 
            cuisine="Mediterranean",
            restaurant_name="Italian Restaurant"
        )
        restaurant_response = llm.invoke(formatted_prompt)

        print("–†–µ—Å—Ç–æ—Ä–∞–Ω:", "Italian Restaurant")
        print("–ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏:", restaurant_response.content)
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()