#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import sys
import os

# –î–æ–¥–∞—î–º–æ src –¥–æ Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_calculator_tools():
    """–¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
    
    try:
        from src.agent.tools.calculator import basic_calculator, advanced_math_solver
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ñ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        test_cases = [
            ("2 + 3", "5"),
            ("10 - 4", "6"),
            ("3 * 4", "12"),
            ("15 / 3", "5"),
            ("2 ** 3", "8")
        ]
        
        for expression, expected in test_cases:
            result = basic_calculator(expression)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} {expression} = {result} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected})")
        
        # –¢–µ—Å—Ç 2: –°–∫–ª–∞–¥–Ω—ñ –≤–∏—Ä–∞–∑–∏
        print("\nüìù –¢–µ—Å—Ç 2: –°–∫–ª–∞–¥–Ω—ñ –≤–∏—Ä–∞–∑–∏")
        complex_cases = [
            ("2 + 3 * 4", "14"),
            ("(2 + 3) * 4", "20"),
            ("3.5 + 2.5", "6")
        ]
        
        for expression, expected in complex_cases:
            result = basic_calculator(expression)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} {expression} = {result} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {expected})")
        
        # –¢–µ—Å—Ç 3: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–æ–∑–≤'—è–∑—É–≤–∞—á
        print("\nüìù –¢–µ—Å—Ç 3: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–æ–∑–≤'—è–∑—É–≤–∞—á")
        solver_cases = [
            "–∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å –∑ 25",
            "15% –≤—ñ–¥ 100",
            "–ø–ª–æ—â–∞ –∫—Ä—É–≥–∞"
        ]
        
        for case in solver_cases:
            result = advanced_math_solver(case)
            print(f"  ‚úÖ '{case}' ‚Üí {result[:50]}...")
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config():
    """–¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    try:
        from src.config.settings import GOOGLE_API_KEY, GEMINI_MODEL_NAME
        
        if GOOGLE_API_KEY:
            print(f"  ‚úÖ GOOGLE_API_KEY –∑–Ω–∞–π–¥–µ–Ω–æ (–¥–æ–≤–∂–∏–Ω–∞: {len(GOOGLE_API_KEY)})")
        else:
            print("  ‚ö†Ô∏è GOOGLE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å: {GEMINI_MODEL_NAME}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def test_agent_creation():
    """–¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agent.agent_executor import create_llm, create_agent_executor
        from src.agent.tools.calculator import calculator_tools
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ LLM
        print("  üì° –°—Ç–≤–æ—Ä–µ–Ω–Ω—è LLM...")
        llm = create_llm()
        print("  ‚úÖ LLM —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞
        print("  üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞...")
        agent = create_agent_executor(llm, calculator_tools)
        print("  ‚úÖ –ê–≥–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("=" * 60)
    print("üßÆ –¢–ï–°–¢–£–í–ê–ù–ù–Ø CALCULATOR AGENT")
    print("=" * 60)
    
    tests = [
        ("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞", test_calculator_tools),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", test_config),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞", test_agent_creation)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"  {status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
        return 0
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 