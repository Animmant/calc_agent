#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.
"""

import sys
import os
import logging

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
project_root = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, project_root)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

from src.reporting.pdf_generator import generate_debug_pdf, generate_math_notebook_pdf

def test_debug_pdf():
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF –∑–≤—ñ—Ç—É –¥–µ–±–∞–≥—É."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó debug PDF...")
    
    debug_data = {
        "original_user_query": "–°–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2 + 2 * 3?",
        "llm_reasoning_steps": [
            "–ê–Ω–∞–ª—ñ–∑—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑",
            "–ó–∞—Å—Ç–æ—Å–æ–≤—É—é –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π: —Å–ø–æ—á–∞—Ç–∫—É –º–Ω–æ–∂–µ–Ω–Ω—è, –ø–æ—Ç—ñ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è",
            "2 * 3 = 6",
            "2 + 6 = 8"
        ],
        "tool_name": "calculator",
        "tool_input": {"expression": "2 + 2 * 3"},
        "tool_output": "8",
        "final_agent_response": "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏—Ä–∞–∑—É 2 + 2 * 3 –¥–æ—Ä—ñ–≤–Ω—é—î 8.",
        "resources": {
            "llm_model": "gemini-1.5-flash"
        }
    }
    
    pdf_path = generate_debug_pdf(debug_data)
    
    if pdf_path:
        print(f"‚úÖ Debug PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}")
        return True
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ debug PDF")
        return False

def test_math_notebook_pdf():
    """–¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–æ—à–∏—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó math notebook PDF...")
    
    problem_statement = "–ó–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –∫—Ä—É–≥–∞ –∑ —Ä–∞–¥—ñ—É—Å–æ–º 5 —Å–º"
    solution_latex = r"""
–î–∞–Ω–æ: —Ä–∞–¥—ñ—É—Å r = 5 —Å–º

–§–æ—Ä–º—É–ª–∞ –ø–ª–æ—â—ñ –∫—Ä—É–≥–∞: S = \pi r^2

–ü—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è:
S = \pi \cdot 5^2 = \pi \cdot 25 = 25\pi

–û–±—á–∏—Å–ª—é—î–º–æ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:
S = 25 \cdot 3.14159... \approx 78.54 —Å–º¬≤
"""
    
    pdf_path = generate_math_notebook_pdf(problem_statement, solution_latex)
    
    if pdf_path:
        print(f"‚úÖ Math notebook PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_path}")
        return True
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ math notebook PDF")
        return False

def test_pdf_tools():
    """–¢–µ—Å—Ç—É—î PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agent.tools.pdf_tools import create_debug_report, create_math_notebook
        
        # –¢–µ—Å—Ç debug report tool
        debug_result = create_debug_report.invoke({
            "original_user_query": "–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç",
            "reasoning_steps": ["–ö—Ä–æ–∫ 1", "–ö—Ä–æ–∫ 2"],
            "tool_name": "test_tool",
            "tool_input": {"param": "value"},
            "tool_output": "–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "final_response": "–§—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        })
        print(f"Debug tool result: {debug_result}")
        
        # –¢–µ—Å—Ç math notebook tool
        math_result = create_math_notebook.invoke({
            "problem_statement": "–¢–µ—Å—Ç–æ–≤–∞ –∑–∞–¥–∞—á–∞",
            "solution_steps": "–ö—Ä–æ–∫ 1: ...\n–ö—Ä–æ–∫ 2: ...",
            "final_answer": "42"
        })
        print(f"Math tool result: {math_result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}")
        return False

def test_simple_pdf_tools():
    """–¢–µ—Å—Ç—É—î —Å–ø—Ä–æ—â–µ–Ω—ñ PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ—â–µ–Ω–∏—Ö PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        from src.agent.tools.pdf_tools import create_simple_math_notebook, create_simple_debug_report
        
        # –¢–µ—Å—Ç simple math notebook tool
        math_result = create_simple_math_notebook.invoke({
            "problem_and_solution": "–ó–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –∫—Ä—É–≥–∞ –∑ —Ä–∞–¥—ñ—É—Å–æ–º 5 —Å–º\nS = œÄ √ó r¬≤\nS = œÄ √ó 25 = 78.54 —Å–º¬≤"
        })
        print(f"Simple math tool result: {math_result}")
        
        # –¢–µ—Å—Ç simple debug report tool
        debug_result = create_simple_debug_report.invoke({
            "query_and_result": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç–∞–≤: 2+2*3\n–†–µ–∑—É–ª—å—Ç–∞—Ç: 8"
        })
        print(f"Simple debug tool result: {debug_result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ —Å–ø—Ä–æ—â–µ–Ω–∏—Ö PDF —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ PDF –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Typst
    import subprocess
    try:
        result = subprocess.run(["typst", "--version"], capture_output=True, text=True)
        print(f"‚úÖ Typst –∑–Ω–∞–π–¥–µ–Ω–æ: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ö†Ô∏è  Typst –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:")
        print("   https://github.com/typst/typst/releases")
        print("   –ê–±–æ —á–µ—Ä–µ–∑ package manager:")
        print("   - Windows: winget install --id Typst.Typst")
        print("   - macOS: brew install typst")
        print("   - Linux: cargo install --git https://github.com/typst/typst --locked typst-cli")
        return
    
    tests_passed = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: Debug PDF
    if test_debug_pdf():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: Math Notebook PDF
    if test_math_notebook_pdf():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: PDF Tools
    if test_pdf_tools():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: Simple PDF Tools
    if test_simple_pdf_tools():
        tests_passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {tests_passed}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

if __name__ == "__main__":
    main() 